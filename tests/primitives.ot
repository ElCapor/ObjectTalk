//	ObjectTalk Scripting Language
//	Copyright 1993-2020 Johan A. Goossens
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//		http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.

//	Test script for ObjectTalk primitives

// Boolean class test
assert('true != false')
assert('true == !false')
assert('(true && true) == true')
assert('(true && false) == false')
assert('(false && false) == false')
assert('(true || true) == true')
assert('(true || false) == true')
assert('(false || false) == false')

assert('true == 1')
assert('true == 4')
assert('true == -4')
assert('false == 0')
assert('false == ""')
assert('false == "x"')
assert('true == "true"')

assert('true.integer() == 1')
assert('true.real() == 1.0')
assert('true.string() == "true"')

assert('false.integer() == 0')
assert('false.real() == 0.0')
assert('false.string() == "false"')

// Integer class test
assert('(1 + 2) == 3')
assert('(3 - 1) == 2')
assert('(3 * 2) == 6')
assert('(8 / 2) == 4')
assert('(11 / 2) == 5')
assert('(8 % 3) == 2')
assert('(2 << 4) == 32')
assert('(64 >> 2) == 16')
assert('(12 & 4) == 4')
assert('(8 | 4) == 12')
assert('(12 ^ 4) == 8')
assert('~4 == -5')

assert('0 != 1')
assert('1 == 1')
assert('0 < 1')
assert('1 <= 1')
assert('2 > 1')
assert('1 >= 1')
assert('-1 == -1')
assert('- -1 == 1')

assert('1.abs() == 1')
assert('-1.abs() == 1')
assert('11.sign() == 1')
assert('-11.sign() == -1')
assert('3.real() > 2.9')

assert('0.boolean() == false')
assert('10.boolean() == true')
assert('10.real() == 10.0')
assert('10.string() == "10"')

// Real class test
assert('(1.2 + 2.3) == 3.5')
assert('(3.4 - 1.2) == 2.2')
assert('(-3.2 * 2) == -6.4')
assert('(8.0 / 2) == 4')
assert('(11.0 / 2.0) == 5.5')

assert('0.0 != 1.0')
assert('1.0 == 1')
assert('0.0 < 1')
assert('1.0 <= 1.0')
assert('1.0 <= 1.1')
assert('2.0 > 1.9')
assert('-1.0 >= -1.01')
assert('-1.0 == -1.0')
assert('- -1.0 == 1.0')

assert('1.0.abs() == 1.0')
assert('-1.0.abs() == 1.0')
assert('11.0.sign() == 1')
assert('-11.0.sign() == -1')
assert('3.0.integer() > 2')

assert('0.0.boolean() == false')
assert('10.0.boolean() == true')
assert('10.0.integer() == 10')
assert('10.0.string().integer() == 10')

// String class test
assert('("Hello" + " " + "World") == "Hello World"')
assert('"Hello" != "World"')
assert('"Hello" == "Hello"')

assert('"Hello".left(4) == "Hell"')
assert('"Hello".right(2) == "lo"')
assert('"Hello".mid(2, 2) == "ll"')

assert('"Hello World".find("World") == 6')

assert('"   Hello World   ".trim() == "Hello World"')
assert('"   Hello World   ".ltrim() == "Hello World   "')
assert('"   Hello World   ".rtrim() == "   Hello World"')
assert('"   Hello \t\n   World   ".compress() == "Hello World"')

assert('"Hello World".lower() == "hello world"')
assert('"Hello World".upper() == "HELLO WORLD"')

assert('"false".boolean() == false')
assert('"x".boolean() == false')
assert('"true".boolean() == true')
assert('"10".integer() == 10')
assert('"10.1".real() - 10.1 < 0.000001')

// Well done
print("Passed all primitive tests")
