//	ObjectTalk Scripting Language
//	Copyright (c) 1993-2021 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.

//	Test script for ObjectTalk operating system functions

system = import("system")

path = system.Path("/var/lib/test.a")
assert(path.string() == "/var/lib/test.a")
assert(path.rootName() == "")
assert(path.rootDirectory() == "/")
assert(path.rootPath() == "/")
assert(path.directory() == "/var/lib")
assert(path.filename() == "test.a")
assert(path.stem() == "test")
assert(path.extension() == ".a")

path = system.Path("../test.a")
assert(path.string() == "../test.a")
assert(path.directory() == "..")

path.clear()
assert(path == "")

assert(system.Path("test.a").directory() == "")
assert(system.Path("").directory() == "")
assert(system.Path("/").directory() == "/")

path = system.Path("/var/lib/test.a")
path.removeFilename()
assert(path == "/var/lib/")

path = system.Path("/var/lib/test.a")
path.replaceFilename("test.cpp")
assert(path == "/var/lib/test.cpp")
path.replaceExtension(".o")
assert(path == "/var/lib/test.o")

assert(system.Path("").isEmpty() == true)
assert(system.Path("/var/lib/test.a").isEmpty() == false)
assert(system.Path("/var/lib/test.a").isAbsolute() == true)
assert(system.Path("var/lib/test.a").isAbsolute() == false)
assert(system.Path("/var/lib/test.a").isRelative() == false)
assert(system.Path("var/lib/test.a").isRelative() == true)

assert(system.Path("/var/lib/test.a").hasRootPath() == true)
assert(system.Path("var/lib/test.a").hasRootPath() == false)
assert(system.Path("/var/lib/test.a").hasRootName() == false)
assert(system.Path("var/lib/test.a").hasRootName() == false)
assert(system.Path("/var/lib/test.a").hasRootDirectory() == true)
assert(system.Path("var/lib/test.a").hasRootDirectory() == false)

assert(system.Path("/var/lib/test.a").hasRelativePath() == true)
assert(system.Path("var/lib/test.a").hasRelativePath() == true)

assert(system.Path("/var/lib/test.a").hasParentPath() == true)
assert(system.Path("var/lib/test.a").hasParentPath() == true)
assert(system.Path("./test.a").hasParentPath() == true)
assert(system.Path("test.a").hasParentPath() == false)

assert(system.Path("/var/lib/test.a").hasFilename() == true)
assert(system.Path("./test.a").hasFilename() == true)
assert(system.Path("test.a").hasFilename() == true)
assert(system.Path("./aa/").hasFilename() == false)

assert(system.Path("/var/lib/test.a").hasStem() == true)
assert(system.Path("/var/lib/test").hasStem() == true)
assert(system.Path("/var/lib/").hasStem() == false)

assert(system.Path("/var/lib/test.a").hasExtension() == true)
assert(system.Path("/var/lib/test").hasExtension() == false)
assert(system.Path("/var/lib/").hasExtension() == false)

os = system.OS()
assert(os.hasenv("OBJECT_TALK") == false)
os.setenv("OBJECT_TALK", "test")
assert(os.hasenv("OBJECT_TALK") == true)
assert(os.getenv("OBJECT_TALK") == "test")
os.unsetenv("OBJECT_TALK")
assert(os.hasenv("OBJECT_TALK") == false)

fs = system.FS()
tmp = fs.gettmp()
cwd = fs.getcwd()

fs.chdir(tmp)
assert(fs.getcwd() == tmp)
fs.chdir(cwd)
assert(fs.getcwd() == cwd)

// Well done
print("Passed all operating system tests")
