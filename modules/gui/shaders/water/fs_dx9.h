static const uint8_t fs_water_dx9[2081] =
{
	0x46, 0x53, 0x48, 0x0b, 0x70, 0x94, 0x72, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x73, // FSH.p.r........s
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, // _normalsSampler.
	0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, // ..........s_norm
	0x61, 0x6c, 0x73, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, // alsTexture......
	0x00, 0x00, 0x00, 0x00, 0x07, 0x75, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x12, 0x04, 0x00, 0x00, // .....u_water....
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, // .......s_normals
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0x07, 0x00, 0x00, 0x23, 0x69, // ..............#i
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, // nclude <metal_st
	0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, // dlib>.#include <
	0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, // simd/simd.h>..us
	0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, // ing namespace me
	0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, // tal;..struct _Gl
	0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // obal.{.    float
	0x34, 0x20, 0x75, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5b, 0x34, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, // 4 u_water[4];.};
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // ..struct xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // Main_out.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, // loat4 bgfx_FragD
	0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, // ata0 [[color(0)]
	0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, // ];.};..struct xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, // atMtlMain_in.{. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, 0x5f, 0x70, 0x6f, 0x73, 0x69, //    float3 v_posi
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, // tion [[user(locn
	0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, // 0)]];.};..fragme
	0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, // nt xlatMtlMain_o
	0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, // ut xlatMtlMain(x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, // latMtlMain_in in
	0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, //  [[stage_in]], c
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, // onstant _Global&
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, //  _mtl_u [[buffer
	0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, // (0)]], texture2d
	0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // <float> s_normal
	0x73, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, // s [[texture(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, // , sampler s_norm
	0x61, 0x6c, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, // alsSampler [[sam
	0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // pler(0)]]).{.   
	0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, //  xlatMtlMain_out
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, //  out = {};.    f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x33, 0x30, 0x32, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, // loat2 _302 = in.
	0x76, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x78, 0x7a, 0x20, 0x2a, 0x20, // v_position.xz * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5b, 0x33, // _mtl_u.u_water[3
	0x5d, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // ].y;.    float3 
	0x5f, 0x33, 0x36, 0x36, 0x20, 0x3d, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, // _366 = normalize
	0x28, 0x28, 0x28, 0x28, 0x28, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x2e, 0x73, // (((((s_normals.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x53, // ample(s_normalsS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x28, 0x5f, 0x33, 0x30, 0x32, 0x20, 0x2a, // ampler, ((_302 *
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x30, 0x39, 0x37, 0x30, 0x38, //  float2(0.009708
	0x37, 0x33, 0x37, 0x39, 0x35, 0x34, 0x34, 0x39, 0x37, 0x33, 0x33, 0x37, 0x33, 0x34, 0x31, 0x33, // 7379544973373413
	0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, // 0859375)) + floa
	0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x77, 0x61, 0x74, 0x65, // t2(_mtl_u.u_wate
	0x72, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x38, 0x38, 0x32, // r[3].x * 0.05882
	0x33, 0x35, 0x32, 0x39, 0x36, 0x33, 0x30, 0x38, 0x39, 0x39, 0x34, 0x32, 0x39, 0x33, 0x32, 0x31, // 3529630899429321
	0x32, 0x38, 0x39, 0x30, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 2890625, _mtl_u.
	0x75, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x30, // u_water[3].x * 0
	0x2e, 0x30, 0x33, 0x34, 0x34, 0x38, 0x32, 0x37, 0x35, 0x38, 0x34, 0x39, 0x32, 0x32, 0x33, 0x31, // .034482758492231
	0x33, 0x36, 0x39, 0x30, 0x31, 0x38, 0x35, 0x35, 0x34, 0x36, 0x38, 0x37, 0x35, 0x29, 0x29, 0x29, // 3690185546875)))
	0x20, 0x2b, 0x20, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x2e, 0x73, 0x61, 0x6d, //  + s_normals.sam
	0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x53, 0x61, 0x6d, // ple(s_normalsSam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x28, 0x5f, 0x33, 0x30, 0x32, 0x20, 0x2a, 0x20, 0x66, // pler, ((_302 * f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x30, 0x39, 0x33, 0x34, 0x35, 0x37, 0x39, // loat2(0.00934579
	0x34, 0x30, 0x39, 0x36, 0x35, 0x38, 0x39, 0x30, 0x38, 0x38, 0x34, 0x33, 0x39, 0x39, 0x34, 0x31, // 4096589088439941
	0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // 40625)) - float2
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5b, // (_mtl_u.u_water[
	0x33, 0x5d, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x2d, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x36, 0x33, // 3].x * (-0.05263
	0x31, 0x35, 0x37, 0x39, 0x33, 0x33, 0x39, 0x35, 0x30, 0x34, 0x32, 0x34, 0x31, 0x39, 0x34, 0x33, // 1579339504241943
	0x33, 0x35, 0x39, 0x33, 0x37, 0x35, 0x29, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 359375), _mtl_u.
	0x75, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x30, // u_water[3].x * 0
	0x2e, 0x30, 0x33, 0x32, 0x32, 0x35, 0x38, 0x30, 0x36, 0x33, 0x35, 0x35, 0x34, 0x37, 0x36, 0x33, // .032258063554763
	0x37, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x29, 0x29, 0x29, 0x29, 0x20, 0x2b, // 7939453125)))) +
	0x20, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, //  s_normals.sampl
	0x65, 0x28, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, // e(s_normalsSampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x28, 0x5f, 0x33, 0x30, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, // er, ((_302 * flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x31, 0x32, 0x32, 0x37, 0x31, 0x32, // at2(0.0001122712
	0x34, 0x39, 0x32, 0x33, 0x36, 0x30, 0x37, 0x33, 0x33, 0x34, 0x34, 0x39, 0x34, 0x35, 0x39, 0x30, // 4923607334494590
	0x37, 0x35, 0x39, 0x32, 0x37, 0x37, 0x33, 0x34, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // 759277344, 0.000
	0x31, 0x30, 0x32, 0x30, 0x30, 0x39, 0x35, 0x38, 0x37, 0x38, 0x36, 0x32, 0x39, 0x39, 0x34, 0x35, // 1020095878629945
	0x32, 0x31, 0x38, 0x35, 0x36, 0x33, 0x30, 0x37, 0x39, 0x38, 0x33, 0x33, 0x39, 0x38, 0x34, 0x34, // 2185630798339844
	0x29, 0x29, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // )) + float2(_mtl
	0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x20, // _u.u_water[3].x 
	0x2a, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x39, 0x39, 0x30, 0x30, 0x39, 0x38, 0x39, 0x39, 0x34, 0x32, // * 0.009900989942
	0x32, 0x35, 0x32, 0x36, 0x33, 0x35, 0x39, 0x35, 0x35, 0x38, 0x31, 0x30, 0x35, 0x34, 0x36, 0x38, // 2526359558105468
	0x37, 0x35, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x77, 0x61, 0x74, // 75, _mtl_u.u_wat
	0x65, 0x72, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x33, // er[3].x * 0.0103
	0x30, 0x39, 0x32, 0x37, 0x38, 0x30, 0x33, 0x33, 0x36, 0x37, 0x33, 0x37, 0x36, 0x33, 0x32, 0x37, // 0927803367376327
	0x35, 0x31, 0x34, 0x36, 0x34, 0x38, 0x34, 0x33, 0x37, 0x35, 0x29, 0x29, 0x29, 0x29, 0x20, 0x2b, // 5146484375)))) +
	0x20, 0x28, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x2e, 0x73, 0x61, 0x6d, 0x70, //  (s_normals.samp
	0x6c, 0x65, 0x28, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x53, 0x61, 0x6d, 0x70, // le(s_normalsSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x28, 0x5f, 0x33, 0x30, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x6c, // ler, ((_302 * fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x39, 0x31, 0x36, 0x35, 0x39, 0x30, // oat2(0.000916590
	0x32, 0x37, 0x33, 0x38, 0x34, 0x35, 0x39, 0x34, 0x30, 0x38, 0x32, 0x38, 0x33, 0x32, 0x33, 0x33, // 2738459408283233
	0x36, 0x34, 0x32, 0x35, 0x37, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // 642578125, 0.000
	0x39, 0x37, 0x33, 0x37, 0x30, 0x39, 0x38, 0x35, 0x38, 0x39, 0x35, 0x33, 0x39, 0x35, 0x32, 0x37, // 9737098589539527
	0x38, 0x39, 0x33, 0x30, 0x36, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, // 89306640625)) - 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, // float2(_mtl_u.u_
	0x77, 0x61, 0x74, 0x65, 0x72, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, // water[3].x * 0.0
	0x30, 0x39, 0x31, 0x37, 0x34, 0x33, 0x31, 0x31, 0x35, 0x33, 0x33, 0x35, 0x37, 0x30, 0x32, 0x38, // 0917431153357028
	0x39, 0x36, 0x31, 0x31, 0x38, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x5f, 0x6d, // 961181640625, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5b, 0x33, 0x5d, 0x2e, // tl_u.u_water[3].
	0x78, 0x20, 0x2a, 0x20, 0x28, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x38, 0x38, 0x34, 0x39, 0x35, 0x35, // x * (-0.00884955
	0x37, 0x34, 0x38, 0x39, 0x31, 0x35, 0x36, 0x37, 0x32, 0x33, 0x30, 0x32, 0x32, 0x34, 0x36, 0x30, // 7489156723022460
	0x39, 0x33, 0x37, 0x35, 0x29, 0x29, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // 9375)))) * 0.5))
	0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2e, //  - float4(1.0)).
	0x78, 0x7a, 0x79, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x35, // xzy * float3(1.5
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, // , 1.0, 1.5));.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x33, 0x37, 0x37, 0x20, 0x3d, 0x20, //   float3 _377 = 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, // float3(normalize
	0x28, 0x2d, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, // (-_mtl_u.u_water
	0x5b, 0x32, 0x5d, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, // [2]).xyz);.    o
	0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, // ut.bgfx_FragData
	0x30, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x66, // 0 = ((((float4(f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x33, 0x37, // ast::max(dot(_37
	0x37, 0x2c, 0x20, 0x5f, 0x33, 0x36, 0x36, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, // 7, _366), 0.0)) 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, // * _mtl_u.u_water
	0x5b, 0x31, 0x5d, 0x29, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x28, // [1]) * 0.5) + ((
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5b, 0x31, // _mtl_u.u_water[1
	0x5d, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, // ] * pow(fast::ma
	0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // x(0.0, dot(norma
	0x6c, 0x69, 0x7a, 0x65, 0x28, 0x2d, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, // lize(-in.v_posit
	0x69, 0x6f, 0x6e, 0x29, 0x2c, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, // ion), normalize(
	0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x2d, 0x5f, 0x33, 0x37, 0x37, 0x2c, 0x20, 0x5f, // reflect(-_377, _
	0x33, 0x36, 0x36, 0x29, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x30, 0x30, 0x2e, 0x30, 0x29, 0x29, // 366)))), 100.0))
	0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  * 2.0)) + float
	0x34, 0x28, 0x30, 0x2e, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x34, 0x39, 0x30, // 4(0.100000001490
	0x31, 0x31, 0x36, 0x31, 0x31, 0x39, 0x33, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x2c, // 116119384765625,
	0x20, 0x30, 0x2e, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x34, 0x39, 0x30, 0x31, //  0.1000000014901
	0x31, 0x36, 0x31, 0x31, 0x39, 0x33, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, // 16119384765625, 
	0x30, 0x2e, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x34, 0x39, 0x30, 0x31, 0x31, // 0.10000000149011
	0x36, 0x31, 0x31, 0x39, 0x33, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x31, // 6119384765625, 1
	0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, // .0)) * _mtl_u.u_
	0x77, 0x61, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, // water[0];.    re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x60, // turn out;.}....`
	0x00,                                                                                           // .
};
