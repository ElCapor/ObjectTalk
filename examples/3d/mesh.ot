#!/usr/local/bin/ot

//	ObjectTalk Scripting Language
//	Copyright (c) 2020-2021 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.

var gui = import("gui");

// specify default values
var defaultGeometry = "box";
var defaultMaterial = "gold";
var defaultRenderer = "textured";

// create combobox value lists
var geometries = [
	"box", "circle", "cylinder", "plane", "sphere",
	"torus", "bunny", "column", "teapot"
];

var textures = {
	"earth" : __DIR__ + "/assets/earth.png",
	"moon"  : __DIR__ + "/assets/moon.png",
	"grass" : __DIR__ + "/assets/grass.jpg",
	"uvmap" : __DIR__ + "/assets/uv.jpg"
};

var materials = gui.getDefaultMaterials().merge(textures.keys());

var renderers = [
	"textured", "wireframe"
];

// define our application
class MyApp : gui.Application {
	function setup(this, screen) {
		// set default geometry and material
		this.setGeometry(defaultGeometry);
		this.setMaterial(defaultMaterial);

		// create all components
		this.camera = gui.Camera()
			.setPosition(0, 40, 40)
			.setTarget(0, -5, -10);

		this.grid = gui.Mesh()
			.setGeometry(gui.PlaneGeometry(50, 50, 10, 10))
			.setMaterial(gui.Material().setFixed("white"))
			.setWireframe(true)
			.rotateX(-pi / 2.0);

		this.mesh = gui.Mesh()
			.setGeometry(this.geometry)
			.setMaterial(this.material);

		this.animation()
			.from(0.0)
			.to(pi * 2.0)
			.during(20000)
			.continuous()
			.onStep(function(angle) {
				this.mesh.rotateY(-angle);
			});

		this.ambient = gui.Ambient();

		this.light = gui.Light()
			.setPosition(25, 25, 40)
			.setDiffuse("#c0c0c0")
			.setSpecular("#c0c0c0");

		this.fog = gui.Fog()
			.setColor("#808080")
			.setDistances(0, 100)
			.disable();

		// create scene
		var scene = gui.Scene()
			.add(this.grid)
			.add(this.mesh)
			.add(this.ambient)
			.add(this.light)
			.add(this.fog);

		// create view
		screen.add(gui.View()
			.setScreenArea(30, 0, 70, 100)
			.setCamera(this.camera)
			.setScene(scene));

		// enable default renderer
		if (defaultRenderer != "textured") {
			this.mesh.setWireframe(true);
		}

		// create control panel
		screen.add(this.createPanel());
	}

	function createPanel(this) {
		var panel = gui.Panel(0, 0, 30, 100);

		var node = gui.TreeNode("Camera:");
		node.add(gui.CameraController(this.camera));
		panel.add(node);

		node = gui.TreeNode("Ambient Light:");
		node.add(gui.AmbientController(this.ambient));
		panel.add(node);

		node = gui.TreeNode("Point Light:");
		node.add(gui.LightController(this.light));
		panel.add(node);

		node = gui.TreeNode("Fog:");
		node.add(gui.FogController(this.fog));
		panel.add(node);

		node = panel.add(gui.TreeNode("3D Object:"));

		node.add(gui.Combobox("Geometry", geometries, defaultGeometry, function(selected) {
			this.setGeometry(selected);
		}));

		node.add(gui.Combobox("Material", materials, defaultMaterial, function(selected) {
			this.setMaterial(selected);
		}));

		node.add(gui.Combobox("Renderer", renderers, defaultRenderer, function(selected) {
			this.setRenderer(selected);
		}));

		node.add(gui.Checkbox("Show grid", true, function(checked) {
			this.grid.setEnabled(checked);
		}));

		return panel;
	}

	function setGeometry(this, name) {
		if (name == "box") {
			this.geometry = gui.BoxGeometry(30, 30, 30);

		} elif (name == "circle") {
			this.geometry = gui.CircleGeometry(20, 30);

		} elif (name == "cylinder") {
			this.geometry = gui.CylinderGeometry(16, 16, 40, 64);

		} elif (name == "plane") {
			this.geometry = gui.PlaneGeometry(40, 40);

		} elif (name == "sphere") {
			this.geometry = gui.SphereGeometry(21, 64, 64);

		} elif (name == "torus") {
			this.geometry = gui.TorusGeometry(15, 5, 32, 32);

		} elif (name == "bunny") {
			this.geometry = gui.ModelGeometry(__DIR__ + "/assets/bunny.obj", 16);

		} elif (name == "column") {
			this.geometry = gui.ModelGeometry(__DIR__ + "/assets/column.obj", 2);

		} elif (name == "teapot") {
			this.geometry = gui.ModelGeometry(__DIR__ + "/assets/teapot.obj", 28);
		}

		if (this.has("mesh")) {
 			this.mesh.setGeometry(this.geometry);
		}
	}

	function setMaterial(this, name) {
		if (name in gui.getDefaultMaterials()) {
			this.material = gui.Material().setMaterial(name);

		} else {
			this.material = gui.Material().setTexture(gui.Texture(textures[name]));
		}

		if (this.has("mesh")) {
			this.mesh.setMaterial(this.material);
		}
	}

	function setRenderer(this, name) {
		this.mesh.setWireframe(name == "wireframe");
	}
}

// instantiate application and run it
var app = MyApp();
app.run("Geometry Demonstration");
