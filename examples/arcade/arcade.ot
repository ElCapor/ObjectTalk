#!/usr/local/bin/ot

//	ObjectTalk Scripting Language
//	Copyright (c) 2020-2022 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.

var gui = import("gui");

var menu = import("menu");
var pong = import("pong");
var breakout = import("breakout");
var tetris = import("tetris");

class Arcade : gui.App {
	function setup(this) {
		// create and activate menu
		this.menu = menu.ArcadeMenu();
		this.menu.setup(this);
		this.active = this.menu;
		this.active.scale(this.getHeight().real() / 9.0);

		this.games = [];
		this.addGame(pong.Pong());
		this.addGame(breakout.Breakout());
		this.addGame(tetris.Tetris());
		this.menu.buildMenu(this.games);

		this.menu.onChoice(function(choice) {
			this.menu.disable();
			choice.select();
			this.active = choice;
		});
	}

	function terminate(this) {
		for game in this.games {
			game.unsetAll();
		}

		this.unsetAll();
	}

	function addGame(this, game) {
		game.setup(this);
		this.games.append(game);

		game.onEnd(function() {
			this.menu.enable();
			this.active = this.menu;
		});
	}

	function update(this) {
		// ensure display scaling is correct
		this.active.scale(this.getHeight().real() / 9.0);

		// update active screen
		this.active.update();
	}

	function onMouseButton(this, button, action, mods, x, y) {
		this.active.onMouseButton(button, action, mods, x, y);
	}

	function onMouseMove(this, x, y) {
		this.active.onMouseMove(x, y);
	}

	function onKey(this, key, mods) {
		this.active.onKey(key, mods);
	}

	function onGamepadAxis(this, gamepad, axis, value) {
		this.active.onGamepadAxis(gamepad, axis, value);
	}

	function onGamepadButton(this, gamepad, button, action) {
		this.active.onGamepadButton(gamepad, button, action);
	}
}

var app = Arcade();
os.runGUI();
