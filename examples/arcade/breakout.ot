//	ObjectTalk Scripting Language
//	Copyright (c) 2020-2022 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.

var gui = import("gui");
var game = import("game");

// game geometry and looks
var worldWidth = 16.0;
var worldHeight = 9.0;
var ballRadius = 0.2;
var paddleWidth = 3.0;
var paddleHeight = 0.1;
var brickWidth = 1.0;
var brickHeight = 0.1;
var brickRows = 8;
var brickCols = 14;
var brickMargin = (worldWidth - (brickCols * brickWidth)) / (brickCols + 1);

var colors = [
	"#000", "#fff",
	"#b33", "#3b3", "#33b",
	"#bb3", "#b3b", "#3bb",
	"#b60"
];

class Breakout : game.Game {
	var name = "Breakout";

	function onSetup(this, app) {
		// create physics simulation
		this.world = gui.World();
		this.world.continuousPhysics(true);

		this.world.addBeginContactCallback(function(body1, body2) {
			this.contact(body1, body2);
		});

		app.addSimulation(this.world);

		// add a floor
		this.bottom = this.world.addStaticBody();
		this.bottom.name = "bottom";
		this.bottom.addEdgeFixture(0, 0, worldWidth, 0);

		// add the walls
		this.walls = this.world.addStaticBody();
		this.walls.name = "walls";
		this.walls.addEdgeFixture(worldWidth, 0, worldWidth, worldHeight);
		this.walls.addEdgeFixture(worldWidth, worldHeight, 0, worldHeight);
		this.walls.addEdgeFixture(0, worldHeight, 0, 0);

		// add a ball
		this.ball = this.world.addDynamicBody();
		this.ball.name = "ball";
		this.ball.setPosition(-worldWidth, 0.0);
		this.ball.gfx = this.vd.addCircle(0, 0, ballRadius, 32);
		var fixture = this.ball.addCircularFixture(0.0, 0.0, ballRadius);
		fixture.setDensity(1.0);
		fixture.setRestitution(1.0);

		// add a paddle
		this.paddle = this.world.addStaticBody();
		this.paddle.name = "paddle";
		this.paddle.gfx = this.vd.addRectangle(0, 0, 0, 0);
		this.paddle.addRectangularFixture(0.0, 0.0, paddleWidth, paddleHeight);

		// add all the bricks
		this.bricks = [];

		for y in range(0, brickRows - 1) {
			var py = worldHeight - (brickHeight + brickMargin) * (y + 4);

			for x in range(0, brickCols - 1) {
				var px = brickMargin + brickWidth / 2.0 + (brickMargin + brickWidth) * x;
				var brick = this.world.addStaticBody();
				brick.name = "brick";
				brick.points = brickRows - y;
				brick.setPosition(px, py);
				brick.addRectangularFixture(0.0, 0.0, brickWidth, brickHeight);
				brick.gfx = this.vd.addRectangle(px - brickWidth / 2.0, py - brickHeight / 2.0, brickWidth, brickHeight);
				this.bricks.append(brick);
			}
		}

		// create scoreboard
		this.vd.pushStyle();
		this.vd.setColor("#47f");
		this.vd.setWidth(2);

		var y = worldHeight - 0.6;
		this.livesCounter = this.vd.addText(0.25, y, 0.6, "0 Lives");

		var x = worldWidth / 2.0 - this.vd.getTextWidth("Time 000", 0.6) / 2.0;
		this.timeCounter = this.vd.addText(x, y, 0.6, "Time 000");

		x = worldWidth - 0.25 - this.vd.getTextWidth("Points 000", 0.6);
		this.scoreCounter = this.vd.addText(x, y, 0.6, "Points 000");
		this.vd.popStyle();

		// create the startup splash screen
		this.splashShapes = [];
		this.vd.pushStyle();
		this.vd.setCenteredText();
		this.vd.setColor("#47f");

		this.splashShapes.append(this.vd.addText(8, 4, 0.6, "Welcome to the Game of Breakout"));
		this.splashShapes.append(this.vd.addText(8, 3, 0.6, "Hit any button/key to start..."));
		this.splashShapes.append(this.vd.addText(8, 2, 0.6, "Hit ESC to return to the menu..."));

		for shape in this.splashShapes {
			this.vd.disableShape(shape);
		}

		this.vd.popStyle();

		// create the pause screen
		this.pauseShapes = [];
		this.vd.pushStyle();
		this.vd.setCenteredText();
		this.vd.setColor("#47f");

		this.pauseShapes.append(this.vd.addText(8, 4, 0.6, "You missed but you still have some life left"));
		this.pauseShapes.append(this.vd.addText(8, 3, 0.6, "Hit any button to continue..."));

		for shape in this.pauseShapes {
			this.vd.disableShape(shape);
		}

		this.vd.popStyle();

		// create gameover screen
		this.gameoverShapes = [];
		this.vd.pushStyle();
		this.vd.setCenteredText();
		this.vd.setColor("#47f");

		this.gameoverShapes.append(this.vd.addText(8, 4, 0.6, "GAME OVER!"));
		this.gameoverShapes.append(this.vd.addText(8, 3, 0.6, "Hit any button to continue..."));

		for shape in this.gameoverShapes {
			this.vd.disableShape(shape);
		}
	}

	function loadBoard(this, level) {
		var board = io.readJSON(Path(__DIR__, "assets", "breakout" + level + ".json"));
		assert(board.size() == brickRows * brickCols);

		var index = 0;
		this.brickCount = 0;

		for y in range(brickRows) {
			for x in range(brickCols) {
				var brick = this.bricks[index];

				if (board[index]) {
					if (board[index] != 1) {
						this.brickCount++;
					}

					brick.enable();
					brick.destructible = board[index] != 1;
					this.vd.enableShape(brick.gfx);
					this.vd.updateColor(brick.gfx, colors[board[index]]);

				} else {
					brick.disable();
					this.vd.disableShape(brick.gfx);
				}

				index++;
			}
		}
	}

	function resetBall(this) {
		this.ball.setPosition(worldWidth / 2.0, 1.0);
		var r = 0.4.random();
		var direction = r < 0.2 ? -1.0 : 1.0;
		this.ball.applyLinearImpulse((0.4 + r) * direction, 1.0);
		this.updateBallVelocity();
	}

	function onSelect(this) {
		// load level 1 board
		this.loadBoard(1);

		// reset counters
		this.lives = 3;
		this.vd.updateTextString(this.livesCounter, "3 Lives");

		this.startTime = os.clock();
		this.time = 0;
		this.vd.updateTextString(this.timeCounter, "Time %03i".format(this.time));

		this.score = 0;
		this.vd.updateTextString(this.scoreCounter, "Points %03i".format(this.score));

		// hide the ball
		this.vd.disableShape(this.ball.gfx);

		// center the paddle
		this.paddlePos = worldWidth / 2.0;
		this.updatePaddlePos(0.0);
	}

	function onShowSplash(this) {
		for shape in this.splashShapes {
			this.vd.enableShape(shape);
		}
	}

	function onHideSplash(this) {
		for shape in this.splashShapes {
			this.vd.disableShape(shape);
		}
	}

	function onStart(this) {
		// show the ball
		this.resetBall();
		this.vd.enableShape(this.ball.gfx);

		// start the simulation
		this.world.start();
	}

	function onPause(this) {
		// stop the simulation
		this.world.stop();

		// hide the ball
		this.vd.disableShape(this.ball.gfx);

		// show the message
		for shape in this.pauseShapes {
			this.vd.enableShape(shape);
		}
	}

	function onResume(this) {
		// update counter
		this.lives--;

		if (this.lives == 1) {
			this.vd.updateTextString(this.livesCounter, "1 Life");

		} else {
			this.vd.updateTextString(this.livesCounter, "%i Lives".format(this.lives));
		}

		// hide the message
		for shape in this.pauseShapes {
			this.vd.disableShape(shape);
		}

		// show the ball
		this.resetBall();
		this.vd.enableShape(this.ball.gfx);

		// start the simulation
		this.world.start();
	}

	function onStop(this) {
		// hide the ball
		this.vd.disableShape(this.ball.gfx);

		// stop the simulation
		this.world.stop();
	}

	function onShowGameOver(this) {
		// stop the simulation
		this.world.stop();

		// hide the ball
		this.vd.disableShape(this.ball.gfx);

		// show the message
		for shape in this.gameoverShapes {
			this.vd.enableShape(shape);
		}
	}

	function onHideGameOver(this) {
		// hide the message
		for shape in this.gameoverShapes {
			this.vd.disableShape(shape);
		}
	}

	function update(this) {
		// update ball location
		this.vd.updateCircle(this.ball.gfx, this.ball.getX(), this.ball.getY(), ballRadius, 32);

		// update paddle location
		var x = this.paddle.getX() - paddleWidth / 2.0;
		var y = this.paddle.getY() - paddleHeight / 2.0;
		this.vd.updateRectangle(this.paddle.gfx, x, y, paddleWidth, paddleHeight);

		// update timer if required
		if (this.state != "gameover") {
			this.time = os.clock() - this.startTime;
		}

		this.vd.updateTextString(this.timeCounter, "Time %03i".format(this.time));
	}

	function updatePaddlePos(this, offset) {
		this.paddlePos += offset;
		this.paddlePos = this.paddlePos.clamp(paddleWidth / 2.0, worldWidth - paddleWidth / 2.0);
		this.paddle.setPosition(this.paddlePos, 1.5 * paddleHeight);
	}

	function onMouseMove(this, x, y) {
		this.paddlePos = x / this.displayScale;
		this.paddlePos = this.paddlePos.clamp(paddleWidth / 2.0, worldWidth - paddleWidth / 2.0);
		this.paddle.setPosition(this.paddlePos, 1.5 * paddleHeight);
	}

	function onKey(this, key, mods) {
		var distance = paddleWidth / 4.0 * (mods ? 1.0 : 2.0);

		if (key == gui.keyLeft) {
			this.updatePaddlePos(-distance);

		} elif (key == gui.keyRight) {
			this.updatePaddlePos(distance);

		} else {
			super(this, "onKey", key, mods);
		}
	}

	function onGamepadAxis(this, gamepad, axis, value) {
		if (gamepad == 0 && axis == 2) {
			this.updatePaddlePos(value.real() / 400.0);

		} else {
			super(this, "onGamepadAxis", gamepad, axis, value);
		}
	}

	function updateBallVelocity(this) {
		// ensure significant vertical ball motion
		var xv = this.ball.getLinearVelocityX();
		var yv = this.ball.getLinearVelocityY();

		if (yv.abs() < xv.abs()) {
			yv = yv < 0 ? -xv.abs() : xv.abs();
		}

		// normalize ball velocity
		var ratio = 9.0 / (xv * xv + yv * yv).sqrt();
		xv *= ratio;
		yv *= ratio;
		this.ball.setLinearVelocity(xv, yv);
	}

	function contact(this, body1, body2) {
		if (body1.name == "paddle") {
			// change horizontal velocity of ball based on where paddle was hit
			this.ball.setLinearVelocity(
				(body2.getX() - body1.getX()) * 3.0,
				this.ball.getLinearVelocityY());

		} elif (body1.name == "brick") {
			if (body1.destructible) {
				this.score += body1.points;
				this.vd.updateTextString(this.scoreCounter, "Points %03i".format(this.score));

				body1.disable();
				this.vd.disableShape(body1.gfx);
				this.brickCount--;

				if (this.brickCount == 0) {
					this.gameover();
				}
			}

		} elif (body1.name == "bottom") {
			if (this.lives == 0) {
				this.gameover();

			} else {
				this.pause();
			}
		}

		this.updateBallVelocity();
	}

	function renderIcon(this, vd, x, y, w, h) {
		vd.pushStyle();

		// render bricks
		var gap = 0.1;
		var bw = (w - gap * 6) / 5.0;
		var bx = x + gap;
		var by = y + gap;
		vd.setColor("#b33");

		for c in range(5) {
			vd.addLine(bx, by, bx + bw, by);
			bx += bw + gap;
		}

		bx = x + gap;
		by += gap;
		vd.setColor("#b60");

		for c in range(5) {
			vd.addLine(bx, by, bx + bw, by);
			bx += bw + gap;
		}

		bx = x + gap;
		by += gap;
		vd.setColor("#3b3");

		for c in range(5) {
			vd.addLine(bx, by, bx + bw, by);
			bx += bw + gap;
		}

		bx = x + gap;
		by += gap;
		vd.setColor("#bb3");

		for c in range(5) {
			vd.addLine(bx, by, bx + bw, by);
			bx += bw + gap;
		}

		// render ball
		vd.setColor("#fff");
		vd.addCircle(x + w / 2.0, y + h / 2.0, 0.02, 8);

		// render paddle
		bx = x + gap + (bw + gap) * 2.0;
		by += gap * 7.0;
		vd.addLine(bx, by, bx + bw, by);

		vd.popStyle();
	}
}
