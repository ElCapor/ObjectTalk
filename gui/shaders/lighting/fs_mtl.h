static const uint8_t OtLightingFS_mtl[3261] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x1e, 0x73, // FSH.o.><.......s
	0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, // _lightingAlbedoT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, // extureSampler...
	0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, // ........s_lighti
	0x6e, 0x67, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, // ngAlbedoTextureT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, //  s_lightingPosit
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ionTextureSample
	0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x73, 0x5f, 0x6c, 0x69, // r.......... s_li
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, // ghtingPositionTe
	0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, // xtureTexture....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, // .......s_lightin
	0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, // gNormalTextureSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, // mpler...........
	0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // s_lightingNormal
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, // TextureTexture..
	0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, // .........s_light
	0x69, 0x6e, 0x67, 0x50, 0x62, 0x72, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, // ingPbrTextureSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x73, // pler...........s
	0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x62, 0x72, 0x54, 0x65, 0x78, 0x74, // _lightingPbrText
	0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, // ureTexture......
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x12, // .....u_lighting.
	0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, // ..........s_ligh
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, // tingAlbedoTextur
	0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x73, 0x5f, 0x6c, 0x69, // e...........s_li
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, // ghtingPositionTe
	0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, // xture...........
	0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // s_lightingNormal
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Texture.........
	0x00, 0x14, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x62, 0x72, 0x54, // ..s_lightingPbrT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0xc5, 0x0a, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, // ....#include <me
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, // tal_stdlib>.#inc
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, // lude <simd/simd.
	0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, // h>..using namesp
	0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // ace metal;..stru
	0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // ct _Global.{.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, //  float4 u_lighti
	0x6e, 0x67, 0x5b, 0x33, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, // ng[3];.};..struc
	0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, // t xlatMtlMain_ou
	0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, // t.{.    float4 b
	0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, // gfx_FragData0 [[
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, // color(0)]];.};..
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, // struct xlatMtlMa
	0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // in_in.{.    floa
	0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, // t2 v_texcoord0 [
	0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, // [user(locn0)]];.
	0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, // };..fragment xla
	0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, // tMtlMain_out xla
	0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // tMtlMain(xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, // Main_in in [[sta
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, // ge_in]], constan
	0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // t _Global& _mtl_
	0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, // u [[buffer(0)]],
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  texture2d<float
	0x3e, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x62, 0x65, // > s_lightingAlbe
	0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, // doTexture [[text
	0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ure(0)]], textur
	0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, // e2d<float> s_lig
	0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, // htingPositionTex
	0x74, 0x75, 0x72, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, // ture [[texture(1
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, // )]], texture2d<f
	0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, // loat> s_lighting
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x20, 0x5b, 0x5b, // NormalTexture [[
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x32, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, // texture(2)]], te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, // xture2d<float> s
	0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x62, 0x72, 0x54, 0x65, 0x78, 0x74, // _lightingPbrText
	0x75, 0x72, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x33, 0x29, // ure [[texture(3)
	0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x6c, 0x69, // ]], sampler s_li
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, // ghtingAlbedoText
	0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, // ureSampler [[sam
	0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // pler(0)]], sampl
	0x65, 0x72, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, // er s_lightingPos
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, // itionTextureSamp
	0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, // ler [[sampler(1)
	0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x6c, 0x69, // ]], sampler s_li
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, // ghtingNormalText
	0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, // ureSampler [[sam
	0x70, 0x6c, 0x65, 0x72, 0x28, 0x32, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // pler(2)]], sampl
	0x65, 0x72, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x62, 0x72, // er s_lightingPbr
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, // TextureSampler [
	0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x33, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, // [sampler(3)]]).{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // .    xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, // _out out = {};. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x36, 0x31, 0x30, 0x20, 0x3d, //    float4 _610 =
	0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x62, 0x65, 0x64, //  s_lightingAlbed
	0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // oTexture.sample(
	0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, // s_lightingAlbedo
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // TextureSampler, 
	0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, // in.v_texcoord0);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x36, 0x31, 0x30, 0x2e, 0x77, 0x20, // .    if (_610.w 
	0x3c, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x34, 0x35, // < 0.050000000745
	0x30, 0x35, 0x38, 0x30, 0x35, 0x39, 0x36, 0x39, 0x32, 0x33, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, // 0580596923828125
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ).    {.        
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, // discard_fragment
	0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // ();.    }.    fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x39, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x31, 0x30, // oat3 _490 = _610
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // .xyz;.    float3
	0x20, 0x5f, 0x34, 0x39, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, //  _499 = fast::no
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, // rmalize(s_lighti
	0x6e, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, // ngNormalTexture.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, // sample(s_lightin
	0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, // gNormalTextureSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // mpler, in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // oord0).xyz);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x36, 0x33, 0x37, 0x20, 0x3d, 0x20, 0x73, //  float4 _637 = s
	0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x62, 0x72, 0x54, 0x65, 0x78, 0x74, // _lightingPbrText
	0x75, 0x72, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x6c, 0x69, 0x67, // ure.sample(s_lig
	0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x62, 0x72, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, // htingPbrTextureS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // ampler, in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // coord0);.    flo
	0x61, 0x74, 0x20, 0x5f, 0x35, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x33, 0x37, 0x2e, 0x78, // at _504 = _637.x
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x30, 0x36, // ;.    float _506
	0x20, 0x3d, 0x20, 0x5f, 0x36, 0x33, 0x37, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, //  = _637.y;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x31, 0x34, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, // loat3 _514 = fas
	0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x5f, 0x6d, 0x74, // t::normalize(_mt
	0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5b, 0x30, // l_u.u_lighting[0
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2d, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, // ].xyz - s_lighti
	0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, // ngPositionTextur
	0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, // e.sample(s_light
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x75, // ingPositionTextu
	0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, // reSampler, in.v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // texcoord0).xyz);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x31, 0x38, // .    float3 _518
	0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, //  = fast::normali
	0x7a, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, // ze(_mtl_u.u_ligh
	0x74, 0x69, 0x6e, 0x67, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, // ting[1].xyz);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x32, 0x32, 0x20, 0x3d, 0x20, //   float3 _522 = 
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, // fast::normalize(
	0x5f, 0x35, 0x31, 0x34, 0x20, 0x2b, 0x20, 0x5f, 0x35, 0x31, 0x38, 0x29, 0x3b, 0x0a, 0x20, 0x20, // _514 + _518);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x36, 0x34, 0x39, 0x20, 0x3d, 0x20, //   float3 _649 = 
	0x6d, 0x69, 0x78, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x33, 0x39, // mix(float3(0.039
	0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x31, 0x30, 0x35, 0x39, 0x33, 0x30, 0x33, 0x32, 0x38, 0x33, // 9999991059303283
	0x36, 0x39, 0x31, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x5f, 0x34, 0x39, 0x30, 0x2c, // 69140625), _490,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x35, 0x30, 0x34, 0x29, 0x29, 0x3b, 0x0a, //  float3(_504));.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x35, 0x39, 0x20, 0x3d, //     float _659 =
	0x20, 0x5f, 0x35, 0x30, 0x36, 0x20, 0x2a, 0x20, 0x5f, 0x35, 0x30, 0x36, 0x3b, 0x0a, 0x20, 0x20, //  _506 * _506;.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x36, 0x36, 0x20, 0x3d, 0x20, 0x66, //   float _666 = f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x34, 0x39, // ast::max(dot(_49
	0x39, 0x2c, 0x20, 0x5f, 0x35, 0x32, 0x32, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // 9, _522), 0.0);.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x37, 0x35, 0x20, 0x3d, //     float _675 =
	0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, //  fast::max(fma(_
	0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x5f, 0x36, 0x36, 0x36, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, // 666 * _666, fma(
	0x5f, 0x36, 0x35, 0x39, 0x2c, 0x20, 0x5f, 0x36, 0x35, 0x39, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x30, // _659, _659, -1.0
	0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, // ), 1.0), 9.99999
	0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, 0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, // 9747378751635551
	0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x3b, // 4526367188e-05);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x39, 0x35, 0x20, // .    float _695 
	0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, // = fast::max(dot(
	0x5f, 0x34, 0x39, 0x39, 0x2c, 0x20, 0x5f, 0x35, 0x31, 0x34, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // _499, _514), 0.0
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x39, // );.    float _69
	0x39, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, // 9 = fast::max(do
	0x74, 0x28, 0x5f, 0x34, 0x39, 0x39, 0x2c, 0x20, 0x5f, 0x35, 0x31, 0x38, 0x29, 0x2c, 0x20, 0x30, // t(_499, _518), 0
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // .0);.    float _
	0x37, 0x31, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x30, 0x36, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // 714 = _506 + 1.0
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x31, 0x37, // ;.    float _717
	0x20, 0x3d, 0x20, 0x5f, 0x37, 0x31, 0x34, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x31, 0x34, 0x3b, 0x0a, //  = _714 * _714;.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x33, 0x32, 0x20, 0x3d, //     float _732 =
	0x20, 0x5f, 0x35, 0x30, 0x36, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, //  _506 + 1.0;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x33, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x37, //  float _735 = _7
	0x33, 0x32, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x33, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // 32 * _732;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x37, 0x35, 0x36, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x34, // loat3 _756 = _64
	0x39, 0x20, 0x2b, 0x20, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, // 9 + ((float3(1.0
	0x29, 0x20, 0x2d, 0x20, 0x5f, 0x36, 0x34, 0x39, 0x29, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, // ) - _649) * pow(
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x31, 0x2e, 0x30, 0x20, // fast::clamp(1.0 
	0x2d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, // - fast::max(dot(
	0x5f, 0x35, 0x32, 0x32, 0x2c, 0x20, 0x5f, 0x35, 0x31, 0x34, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // _522, _514), 0.0
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x35, 0x2e, // ), 0.0, 1.0), 5.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, // 0));.    out.bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, // x_FragData0 = fl
	0x6f, 0x61, 0x74, 0x34, 0x28, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, // oat4(((float3(0.
	0x30, 0x32, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x33, 0x32, 0x39, 0x34, 0x34, 0x37, 0x37, // 0299999993294477
	0x34, 0x36, 0x32, 0x37, 0x36, 0x38, 0x35, 0x35, 0x34, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2a, // 4627685546875) *
	0x20, 0x5f, 0x34, 0x39, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x36, 0x33, 0x37, 0x2e, 0x7a, 0x29, //  _490) * _637.z)
	0x20, 0x2b, 0x20, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, //  + (fma(((float3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x37, 0x35, 0x36, 0x29, 0x20, 0x2a, 0x20, // (1.0) - _756) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, 0x35, 0x30, 0x34, 0x29, 0x29, 0x20, 0x2a, 0x20, // (1.0 - _504)) * 
	0x5f, 0x34, 0x39, 0x30, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x33, // _490, float3(0.3
	0x31, 0x38, 0x33, 0x30, 0x39, 0x38, 0x37, 0x33, 0x33, 0x34, 0x32, 0x35, 0x31, 0x34, 0x30, 0x33, // 1830987334251403
	0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x29, 0x2c, 0x20, 0x28, 0x5f, 0x37, 0x35, 0x36, // 80859375), (_756
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x28, 0x5f, 0x36, 0x35, 0x39, 0x20, 0x2a, 0x20, 0x5f, 0x36, 0x35, //  * (((_659 * _65
	0x39, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x28, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x37, // 9) / ((3.1415927
	0x34, 0x31, 0x30, 0x31, 0x32, 0x35, 0x37, 0x33, 0x32, 0x34, 0x32, 0x31, 0x38, 0x37, 0x35, 0x20, // 410125732421875 
	0x2a, 0x20, 0x5f, 0x36, 0x37, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x36, 0x37, 0x35, 0x29, 0x29, // * _675) * _675))
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x5f, 0x36, 0x39, 0x39, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, //  * ((_699 / fma(
	0x5f, 0x36, 0x39, 0x39, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x2d, 0x5f, 0x37, 0x33, 0x35, 0x2c, // _699, fma(-_735,
	0x20, 0x30, 0x2e, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x5f, 0x37, //  0.125, 1.0), _7
	0x33, 0x35, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 35 * 0.125)) * (
	0x5f, 0x36, 0x39, 0x35, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x36, 0x39, 0x35, 0x2c, // _695 / fma(_695,
	0x20, 0x66, 0x6d, 0x61, 0x28, 0x2d, 0x5f, 0x37, 0x31, 0x37, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, //  fma(-_717, 0.12
	0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x5f, 0x37, 0x31, 0x37, 0x20, 0x2a, 0x20, // 5, 1.0), _717 * 
	0x30, 0x2e, 0x31, 0x32, 0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x20, 0x2f, 0x20, 0x66, 0x6c, 0x6f, // 0.125))))) / flo
	0x61, 0x74, 0x33, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x34, 0x2e, 0x30, 0x20, 0x2a, 0x20, 0x66, 0x61, // at3(fma(4.0 * fa
	0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x34, 0x39, 0x39, // st::max(dot(_499
	0x2c, 0x20, 0x5f, 0x35, 0x31, 0x34, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, // , _514), 0.0), f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x34, 0x39, // ast::max(dot(_49
	0x39, 0x2c, 0x20, 0x5f, 0x35, 0x31, 0x38, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, // 9, _518), 0.0), 
	0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, // 9.99999974737875
	0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, // 1635551452636718
	0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, // 8e-05))) * fast:
	0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x34, 0x39, 0x39, 0x2c, 0x20, 0x5f, // :max(dot(_499, _
	0x35, 0x31, 0x38, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x5f, 0x36, 0x31, // 518), 0.0)), _61
	0x30, 0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 0.w);.    return
	0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0xa0, 0x00,                   //  out;.}......
};
