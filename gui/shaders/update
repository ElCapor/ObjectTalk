#!/bin/bash
#
#	ObjectTalk Scripting Language
#	Copyright (c) 2020-2023 Johan A. Goossens. All rights reserved.
#
#	This work is licensed under the terms of the MIT license.
#	For a copy, see <https://opensource.org/licenses/MIT>.

SHADERC=~/bin/shaderc
HOME="$(cd -P "$(dirname "${BASH_SOURCE[0]}")"; pwd)"
FORCE=0

SHADER_INCLUDES=""
SHADER_DEFINES=""
SHADER_BAT=""

while [ $# -gt 0 ]
do
	case $1 in
		-f|--force)
			FORCE=1
			shift
			;;
		*)
			echo "Invalid parameter [$1]"
			exit
	esac
done


#
#	needsUpdate
#

function needsUpdate() {
	if [ ${FORCE} -eq 1 ]
	then
		true

	elif [ ! -f ${HOME}/Ot$1Shader.h ]
	then
		true

	elif [ $2 -nt $3 ]
	then
		true

	elif [ ../include/bgfx.glsl -nt $3 -o ../include/light.glsl -nt $3 -o ../include/material.glsl -nt $3 ]
	then
		true

	else
		false
	fi
}


#
#	fakePart
#

function fakePart() {
	if [ -f $1_mtl.h -a ! -f $1_$2.h ]
	then
		sed "s/_mtl/_$2/" <$1_mtl.h >$1_$2.h
	fi
}


#
#	processShader
#

function processShader() {
	case $1 in
		vertex) EXT=vs;;
		fragment) EXT=fs;;
	esac

	if [ $1 == "vertex" ]
	then
		PROFILE="vs"

	else
		PROFILE="ps"
	fi

	if [ $2 == "instancing" ]
	then
		PREFIX=${EXT}i

	else
		PREFIX=${EXT}
	fi

	UPREFIX=$(echo "${PREFIX}" |  tr '[:lower:]' '[:upper:]')

	if needsUpdate $3 $2.${EXT} ${PREFIX}_mtl.h
	then
		echo "--------------------------------------- Compiling $1 $2 $3"
		${SHADERC} -f $2.${EXT} -o ${PREFIX}_mtl.h -i ${HOME}/include --type $1 --platform osx -p metal --bin2c Ot$3${UPREFIX}_mtl
		${SHADERC} -f $2.${EXT} -o ${PREFIX}_glsl.h -i ${HOME}/include --type $1 --platform linux -p 120 --bin2c Ot$3${UPREFIX}_glsl
		${SHADERC} -f $2.${EXT} -o ${PREFIX}_essl.h -i ${HOME}/include --type $1 --platform linux -p 300_es --bin2c Ot$3${UPREFIX}_essl
		${SHADERC} -f $2.${EXT} -o ${PREFIX}_spv.h -i ${HOME}/include --type $1 --platform linux -p spirv --bin2c Ot$3${UPREFIX}_spv
		fakePart ${PREFIX} dx9
		fakePart ${PREFIX} dx11
	fi

	SHADER_BAT+="%HOMEDRIVE%%HOMEPATH%\\\\bin\\\\shaderc -f $4/$2.${EXT} -o $4/${PREFIX}_dx9.h -i include --type $1 --platform windows -p ${PROFILE}_3_0 -O 3 --bin2c Ot$3${UPREFIX}_dx9\n"
	SHADER_BAT+="%HOMEDRIVE%%HOMEPATH%\\\\bin\\\\shaderc -f $4/$2.${EXT} -o $4/${PREFIX}_dx11.h -i include --type $1 --platform windows -p ${PROFILE}_5_0 -O 3 --bin2c Ot$3${UPREFIX}_dx11\n"
}


#
#	processDirectory
#

function processDirectory() {
	SHADER_INCLUDES+="#include \"Ot$1Shader.h\"\n"
	SHADER_LOWERCASE=$(echo "$1" |  tr '[:upper:]' '[:lower:]')

	cd ${HOME}/${SHADER_LOWERCASE}

	if [ -f shader.vs ]
	then
		processShader vertex shader $1 ${SHADER_LOWERCASE}
		SHADER_DEFINES+="\tBGFX_EMBEDDED_SHADER(Ot$1VS),\n"
	fi

	if [ -f shader.fs ]
	then
		processShader fragment shader $1 ${SHADER_LOWERCASE}
		SHADER_DEFINES+="\tBGFX_EMBEDDED_SHADER(Ot$1FS),\n"
	fi

	if [ -f instancing.vs ]
	then
		processShader vertex instancing $1 ${SHADER_LOWERCASE}
		SHADER_DEFINES+="\tBGFX_EMBEDDED_SHADER(Ot$1VSI),\n"
	fi

	SHADER_BAT+="\n"

	cat >../Ot$1Shader.h <<END
//	ObjectTalk Scripting Language
//	Copyright (c) 2020-2023 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.


//
//	Include files
//

#include "${SHADER_LOWERCASE}/vs_mtl.h"
#include "${SHADER_LOWERCASE}/vs_glsl.h"
#include "${SHADER_LOWERCASE}/vs_essl.h"
#include "${SHADER_LOWERCASE}/vs_spv.h"
#include "${SHADER_LOWERCASE}/vs_dx9.h"
#include "${SHADER_LOWERCASE}/vs_dx11.h"

#include "${SHADER_LOWERCASE}/fs_mtl.h"
#include "${SHADER_LOWERCASE}/fs_glsl.h"
#include "${SHADER_LOWERCASE}/fs_essl.h"
#include "${SHADER_LOWERCASE}/fs_spv.h"
#include "${SHADER_LOWERCASE}/fs_dx9.h"
#include "${SHADER_LOWERCASE}/fs_dx11.h"
END

	if [ -f instancing.vs ]
	then
		cat >>../Ot$1Shader.h <<END

#include "${SHADER_LOWERCASE}/vsi_mtl.h"
#include "${SHADER_LOWERCASE}/vsi_glsl.h"
#include "${SHADER_LOWERCASE}/vsi_essl.h"
#include "${SHADER_LOWERCASE}/vsi_spv.h"
#include "${SHADER_LOWERCASE}/vsi_dx9.h"
#include "${SHADER_LOWERCASE}/vsi_dx11.h"
END

	fi

	cd ${HOME}
}


#
#	Main
#

processDirectory BlendMapped
processDirectory Blit
processDirectory Bloom
processDirectory Blur
processDirectory Colored
processDirectory Debug
processDirectory Fixed
processDirectory Geometry
processDirectory ImGui
processDirectory Lighting
processDirectory Shadow
processDirectory Sky
processDirectory Skybox
processDirectory SkySphere
processDirectory Terrain
processDirectory Textured
processDirectory TransparentShadow
processDirectory VectorDisplay
processDirectory Water

cat >${HOME}//OtShaders.h <<END
//	ObjectTalk Scripting Language
//	Copyright (c) 2020-2023 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.


//
//	Include files
//

#include "bgfx/embedded_shader.h"

$(echo -e ${SHADER_INCLUDES})


//
//	Globals
//

static const bgfx::EmbeddedShader embeddedShaders[] = {
$(echo -e ${SHADER_DEFINES})
	BGFX_EMBEDDED_SHADER_END()
};
END

cat >${HOME}//update.bat <<END
::	ObjectTalk Scripting Language
::	Copyright (c) 2020-2023 Johan A. Goossens. All rights reserved.
::
::	This work is licensed under the terms of the MIT license.
::	For a copy, see <https://opensource.org/licenses/MIT>.


pushd "%~dp0"

$(echo -e ${SHADER_BAT})

popd
END
