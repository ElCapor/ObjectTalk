#!/bin/bash
#
#	ObjectTalk Scripting Language
#	Copyright (c) 2020-2022 Johan A. Goossens. All rights reserved.
#
#	This work is licensed under the terms of the MIT license.
#	For a copy, see <https://opensource.org/licenses/MIT>.

SHADERC=~/bin/shaderc
HOME="$(cd -P "$(dirname "${BASH_SOURCE[0]}")"; pwd)"
FORCE=0
UPDATEBATCH=0

while [ $# -gt 0 ]
do
	case $1 in
		-b|--updatebatch)
			UPDATEBATCH=1
			shift
			;;
		-f|--force)
			FORCE=1
			shift
			;;
		*)
			echo "Invalid parameter [$1]"
			exit
	esac
done

function needsUpdate() {
	if [ ${FORCE} -eq 1 ]
	then
		echo "--------------------------------------- $1"
		true

	elif [ ${UPDATEBATCH} -eq 1 ]
	then
		true

	elif [ ! -f ${HOME}/Ot$1Shader.h ]
	then
		true

	elif [ -f ${SHADER_DIR}/shader.vs -a ${SHADER_DIR}/shader.vs -nt ${HOME}/Ot$1Shader.h ]
	then
		true

	elif [ -f ${SHADER_DIR}/shader.fs -a ${SHADER_DIR}/shader.fs -nt ${HOME}/Ot$1Shader.h ]
	then
		true

	elif [ -f ${SHADER_DIR}/instancing.vs -a ${SHADER_DIR}/instancing.vs -nt ${HOME}/Ot$1Shader.h ]
	then
		true

	else
		false
	fi
}

function fakePart() {
	if [ -f $1_mtl.h -a ! -f $1_$3.h ]
	then
		sed "s/_mtl/_$3/" <$1_mtl.h >$1_$3.h
	fi
}

function compilePart() {
	case $1 in
		vertex) EXT=vs;;
		fragment) EXT=fs;;
	esac

	if [ $2 == "instancing" ]
	then
		PREFIX=${EXT}i

	else
		PREFIX=${EXT}
	fi

	UPREFIX=$(echo "${PREFIX}" |  tr '[:lower:]' '[:upper:]')

	if [ ${UPDATEBATCH} -eq 1 ]
	then
		if [ $1 == "vertex" ]
		then
			PROFILE="vs"

		else
			PROFILE="ps"
		fi

		DIR=$(echo "$3" |  tr '[:upper:]' '[:lower:]')
		echo "%HOMEDRIVE%%HOMEPATH%\\bin\\shaderc -f ${DIR}/$2.${EXT} -o ${DIR}/${PREFIX}_dx9.h -i include --type $1 --platform windows -p ${PROFILE}_3_0 -O 3 --bin2c Ot$3${UPREFIX}_dx9" >>${HOME}/update.bat
		echo "%HOMEDRIVE%%HOMEPATH%\\bin\\shaderc -f ${DIR}/$2.${EXT} -o ${DIR}/${PREFIX}_dx11.h -i include --type $1 --platform windows -p ${PROFILE}_5_0 -O 3 --bin2c Ot$3${UPREFIX}_dx11" >>${HOME}/update.bat

	else
		${SHADERC} -f $2.${EXT} -o ${PREFIX}_mtl.h -i ${HOME}/include --type $1 --platform osx -p metal --bin2c Ot$3${UPREFIX}_mtl
		${SHADERC} -f $2.${EXT} -o ${PREFIX}_glsl.h -i ${HOME}/include --type $1 --platform linux -p 120 --bin2c Ot$3${UPREFIX}_glsl
		${SHADERC} -f $2.${EXT} -o ${PREFIX}_essl.h -i ${HOME}/include --type $1 --platform linux -p 300_es --bin2c Ot$3${UPREFIX}_essl
		${SHADERC} -f $2.${EXT} -o ${PREFIX}_spv.h -i ${HOME}/include --type $1 --platform linux -p spirv --bin2c Ot$3${UPREFIX}_spv
		fakePart ${PREFIX} $3 dx9
		fakePart ${PREFIX} $3 dx11
	fi
}

function compileShader() {
	SHADER_DIR=${HOME}/$(echo "$1" |  tr '[:upper:]' '[:lower:]')

	if needsUpdate $1
	then
		cd ${SHADER_DIR}

		if [ -f shader.vs ]
		then
			compilePart vertex shader $1
		fi

		if [ -f shader.fs ]
		then
			compilePart fragment shader $1
		fi

		if [ -f instancing.vs ]
		then
			compilePart vertex instancing $1
		fi

		cat vs_glsl.h vs_essl.h vs_spv.h vs_dx9.h vs_dx11.h vs_mtl.h >../Ot$1Shader.h
		cat fs_glsl.h fs_essl.h fs_spv.h fs_dx9.h fs_dx11.h fs_mtl.h >>../Ot$1Shader.h

		if [ -f vsi_mtl.h ]
		then
			cat vsi_glsl.h vsi_essl.h vsi_spv.h vsi_dx9.h vsi_dx11.h vsi_mtl.h >>../Ot$1Shader.h
		fi

		cd ${HOME}
	fi
}

if [ ${UPDATEBATCH} -eq 1 ]
then
	echo 'cd /D "%~dp0"' >${HOME}/update.bat
fi

compileShader Background
compileShader BlendMapped
compileShader Blit
compileShader Bloom
compileShader Blur
compileShader Colored
compileShader Debug
compileShader Fixed
compileShader ImGui
compileShader Shadow
compileShader Sky
compileShader Skybox
compileShader Terrain
compileShader Textured
compileShader VectorDisplay
compileShader Water
