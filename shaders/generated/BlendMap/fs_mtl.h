static const uint8_t OtBlendMapFS_mtl[4038] =
{
	0x46, 0x53, 0x48, 0x0b, 0x19, 0x67, 0x93, 0x59, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x11, 0x73, // FSH..g.Y.......s
	0x5f, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // _BlendMapSampler
	0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x73, 0x5f, 0x42, 0x6c, 0x65, // ...........s_Ble
	0x6e, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, // ndMapTexture....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x4e, // .......a_AlbedoN
	0x6f, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, // oneSampler......
	0x00, 0x00, 0x00, 0x00, 0x13, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x4e, 0x6f, 0x6e, // .....a_AlbedoNon
	0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, // eTexture........
	0x00, 0x00, 0x12, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x53, 0x61, // ...a_AlbedoRedSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, // mpler...........
	0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x75, // a_AlbedoRedTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x61, 0x5f, 0x41, // re...........a_A
	0x6c, 0x62, 0x65, 0x64, 0x6f, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // lbedoGreenSample
	0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x61, 0x5f, 0x41, 0x6c, // r...........a_Al
	0x62, 0x65, 0x64, 0x6f, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // bedoGreenTexture
	0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x61, 0x5f, 0x41, 0x6c, 0x62, // ...........a_Alb
	0x65, 0x64, 0x6f, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, // edoBlueSampler..
	0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, // .........a_Albed
	0x6f, 0x42, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, // oBlueTexture....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, // .......s_Normals
	0x4e, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, // NoneSampler.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x4e, // ......s_NormalsN
	0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, // oneTexture......
	0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x52, 0x65, // .....s_NormalsRe
	0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, // dSampler........
	0x00, 0x00, 0x13, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x64, 0x54, // ...s_NormalsRedT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x15, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, // .s_NormalsGreenS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ampler..........
	0x15, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x54, // .s_NormalsGreenT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x14, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x61, // .s_NormalsBlueSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, // mpler...........
	0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x78, // s_NormalsBlueTex
	0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x75, // ture...........u
	0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x12, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, // _blendmap.......
	0x00, 0x00, 0x00, 0x0a, 0x73, 0x5f, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x10, 0x00, // ....s_BlendMap..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, // .........a_Albed
	0x6f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, // oNone...........
	0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x10, 0x00, 0x00, 0x00, 0x00, // a_AlbedoRed.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x47, 0x72, // ......a_AlbedoGr
	0x65, 0x65, 0x6e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x61, 0x5f, // een...........a_
	0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x42, 0x6c, 0x75, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // AlbedoBlue......
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x4e, 0x6f, // .....s_NormalsNo
	0x6e, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x73, 0x5f, 0x4e, // ne...........s_N
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x64, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ormalsRed.......
	0x00, 0x00, 0x00, 0x0e, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, // ....s_NormalsGre
	0x65, 0x6e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x73, 0x5f, 0x4e, // en...........s_N
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ormalsBlue......
	0x00, 0x00, 0x00, 0x00, 0xaa, 0x0c, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, // ........#include
	0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, //  <metal_stdlib>.
	0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, // #include <simd/s
	0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, // imd.h>..using na
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, // mespace metal;..
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, // struct _Global.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x62, 0x6c, // .    float4 u_bl
	0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x32, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, // endmap[2];.};..s
	0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // truct xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // n_out.{.    floa
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, // t4 bgfx_FragData
	0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, // 0 [[color(0)]];.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, //     float4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x31, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, // FragData1 [[colo
	0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // r(1)]];.    floa
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, // t4 bgfx_FragData
	0x32, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x32, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, // 2 [[color(2)]];.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, //     float4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x33, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, // FragData3 [[colo
	0x72, 0x28, 0x33, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // r(3)]];.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, // ct xlatMtlMain_i
	0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, // n.{.    float3 v
	0x5f, 0x62, 0x69, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, // _bitangent [[use
	0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // r(locn0)]];.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, // float3 v_normal 
	0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, // [[user(locn1)]];
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x61, // .    float3 v_ta
	0x6e, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, // ngent [[user(loc
	0x6e, 0x33, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // n3)]];.    float
	0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, // 2 v_texcoord0 [[
	0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x34, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, // user(locn4)]];.}
	0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, // ;..fragment xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, // MtlMain_out xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // MtlMain(xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, // ain_in in [[stag
	0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, // e_in]], constant
	0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, //  _Global& _mtl_u
	0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, //  [[buffer(0)]], 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, // texture2d<float>
	0x20, 0x73, 0x5f, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x20, 0x5b, 0x5b, 0x74, 0x65, //  s_BlendMap [[te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, // xture(0)]], text
	0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x61, 0x5f, 0x41, // ure2d<float> a_A
	0x6c, 0x62, 0x65, 0x64, 0x6f, 0x4e, 0x6f, 0x6e, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, // lbedoNone [[text
	0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ure(1)]], textur
	0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, // e2d<float> a_Alb
	0x65, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // edoRed [[texture
	0x28, 0x32, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, // (2)]], texture2d
	0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, // <float> a_Albedo
	0x47, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, // Green [[texture(
	0x33, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, // 3)]], texture2d<
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x42, // float> a_AlbedoB
	0x6c, 0x75, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x34, 0x29, // lue [[texture(4)
	0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, // ]], texture2d<fl
	0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x4e, 0x6f, // oat> s_NormalsNo
	0x6e, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x35, 0x29, 0x5d, // ne [[texture(5)]
	0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, // ], texture2d<flo
	0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x64, // at> s_NormalsRed
	0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x36, 0x29, 0x5d, 0x5d, 0x2c, //  [[texture(6)]],
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  texture2d<float
	0x3e, 0x20, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, 0x65, 0x6e, // > s_NormalsGreen
	0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x37, 0x29, 0x5d, 0x5d, 0x2c, //  [[texture(7)]],
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  texture2d<float
	0x3e, 0x20, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x20, // > s_NormalsBlue 
	0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x38, 0x29, 0x5d, 0x5d, 0x2c, 0x20, // [[texture(8)]], 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, // sampler s_BlendM
	0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, // apSampler [[samp
	0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ler(0)]], sample
	0x72, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x4e, 0x6f, 0x6e, 0x65, 0x53, 0x61, // r a_AlbedoNoneSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, // mpler [[sampler(
	0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x61, 0x5f, // 1)]], sampler a_
	0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // AlbedoRedSampler
	0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x32, 0x29, 0x5d, 0x5d, 0x2c, //  [[sampler(2)]],
	0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, //  sampler a_Albed
	0x6f, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, // oGreenSampler [[
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x33, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, // sampler(3)]], sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x42, 0x6c, // mpler a_AlbedoBl
	0x75, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, // ueSampler [[samp
	0x6c, 0x65, 0x72, 0x28, 0x34, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ler(4)]], sample
	0x72, 0x20, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x53, // r s_NormalsNoneS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ampler [[sampler
	0x28, 0x35, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, // (5)]], sampler s
	0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, // _NormalsRedSampl
	0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x36, 0x29, 0x5d, // er [[sampler(6)]
	0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x4e, 0x6f, 0x72, // ], sampler s_Nor
	0x6d, 0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // malsGreenSampler
	0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x37, 0x29, 0x5d, 0x5d, 0x2c, //  [[sampler(7)]],
	0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, //  sampler s_Norma
	0x6c, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, // lsBlueSampler [[
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x38, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, // sampler(8)]]).{.
	0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, //     xlatMtlMain_
	0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, // out out = {};.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x36, 0x35, 0x33, 0x20, 0x3d, 0x20, //   float4 _653 = 
	0x73, 0x5f, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // s_BlendMap.sampl
	0x65, 0x28, 0x73, 0x5f, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, // e(s_BlendMapSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ler, in.v_texcoo
	0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // rd0);.    float 
	0x5f, 0x34, 0x38, 0x35, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, // _485 = ((1.0 - _
	0x36, 0x35, 0x33, 0x2e, 0x78, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x36, 0x35, 0x33, 0x2e, 0x79, 0x29, // 653.x) - _653.y)
	0x20, 0x2d, 0x20, 0x5f, 0x36, 0x35, 0x33, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, //  - _653.z;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x34, 0x38, 0x39, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, // loat2 _489 = in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2a, 0x20, 0x5f, 0x6d, // v_texcoord0 * _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, // tl_u.u_blendmap[
	0x30, 0x5d, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // 0].x;.    float4
	0x20, 0x5f, 0x36, 0x36, 0x32, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, //  _662 = a_Albedo
	0x4e, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x61, 0x5f, 0x41, 0x6c, // None.sample(a_Al
	0x62, 0x65, 0x64, 0x6f, 0x4e, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // bedoNoneSampler,
	0x20, 0x5f, 0x34, 0x38, 0x39, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  _489);.    floa
	0x74, 0x34, 0x20, 0x5f, 0x36, 0x37, 0x31, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, // t4 _671 = a_Albe
	0x64, 0x6f, 0x52, 0x65, 0x64, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x61, 0x5f, 0x41, // doRed.sample(a_A
	0x6c, 0x62, 0x65, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // lbedoRedSampler,
	0x20, 0x5f, 0x34, 0x38, 0x39, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  _489);.    floa
	0x74, 0x34, 0x20, 0x5f, 0x36, 0x38, 0x30, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, // t4 _680 = a_Albe
	0x64, 0x6f, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x61, // doGreen.sample(a
	0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x61, 0x6d, 0x70, // _AlbedoGreenSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, 0x38, 0x39, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ler, _489);.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x36, 0x38, 0x39, 0x20, 0x3d, 0x20, 0x61, 0x5f, // float4 _689 = a_
	0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x42, 0x6c, 0x75, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // AlbedoBlue.sampl
	0x65, 0x28, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x61, // e(a_AlbedoBlueSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, 0x38, 0x39, 0x29, 0x3b, 0x0a, 0x20, 0x20, // mpler, _489);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x32, 0x32, 0x20, 0x3d, 0x20, //   float3 _522 = 
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, // fast::normalize(
	0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x3b, 0x0a, 0x20, 0x20, // in.v_normal);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x20, 0x5f, 0x37, 0x30, 0x38, 0x20, //   float3x3 _708 
	0x3d, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x66, 0x6c, 0x6f, 0x61, // = transpose(floa
	0x74, 0x33, 0x78, 0x33, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // t3x3(fast::norma
	0x6c, 0x69, 0x7a, 0x65, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, // lize(in.v_tangen
	0x74, 0x29, 0x2c, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // t), fast::normal
	0x69, 0x7a, 0x65, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x62, 0x69, 0x74, 0x61, 0x6e, 0x67, 0x65, // ize(in.v_bitange
	0x6e, 0x74, 0x29, 0x2c, 0x20, 0x5f, 0x35, 0x32, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // nt), _522));.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x37, 0x39, 0x39, 0x3b, 0x0a, 0x20, 0x20, //  float3 _799;.  
	0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x28, 0x28, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, //   if ((((_mtl_u.
	0x75, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x20, // u_blendmap[1].x 
	0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // != 0.0) || (_mtl
	0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x31, 0x5d, // _u.u_blendmap[1]
	0x2e, 0x79, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x28, // .y != 0.0)) || (
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, // _mtl_u.u_blendma
	0x70, 0x5b, 0x31, 0x5d, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, // p[1].z != 0.0)) 
	0x7c, 0x7c, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, // || (_mtl_u.u_ble
	0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x31, 0x5d, 0x2e, 0x77, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, // ndmap[1].w != 0.
	0x30, 0x29, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0)).    {.      
	0x20, 0x20, 0x5f, 0x37, 0x39, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, //   _799 = fast::n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x28, 0x28, 0x28, 0x73, 0x65, 0x6c, 0x65, // ormalize((((sele
	0x63, 0x74, 0x28, 0x5f, 0x35, 0x32, 0x32, 0x2c, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, // ct(_522, fast::n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x28, 0x28, 0x73, 0x5f, 0x4e, 0x6f, 0x72, // ormalize(((s_Nor
	0x6d, 0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // malsNone.sample(
	0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x6d, // s_NormalsNoneSam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, 0x38, 0x39, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x20, // pler, _489).xyz 
	0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, // * 2.0) - float3(
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x30, 0x38, 0x29, 0x2c, 0x20, 0x62, // 1.0)) * _708), b
	0x6f, 0x6f, 0x6c, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, // ool3(_mtl_u.u_bl
	0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x20, 0x21, 0x3d, 0x20, 0x30, // endmap[1].x != 0
	0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x34, 0x38, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, // .0)) * _485) + (
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x5f, 0x35, 0x32, 0x32, 0x2c, 0x20, 0x66, 0x61, 0x73, // select(_522, fas
	0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x28, 0x28, 0x73, // t::normalize(((s
	0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x64, 0x2e, 0x73, 0x61, 0x6d, 0x70, // _NormalsRed.samp
	0x6c, 0x65, 0x28, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x64, 0x53, // le(s_NormalsRedS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, 0x38, 0x39, 0x29, 0x2e, 0x78, 0x79, // ampler, _489).xy
	0x7a, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // z * 2.0) - float
	0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x30, 0x38, 0x29, 0x2c, // 3(1.0)) * _708),
	0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, //  bool3(_mtl_u.u_
	0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x31, 0x5d, 0x2e, 0x79, 0x20, 0x21, 0x3d, // blendmap[1].y !=
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x36, 0x35, 0x33, 0x2e, 0x78, 0x29, //  0.0)) * _653.x)
	0x29, 0x20, 0x2b, 0x20, 0x28, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x5f, 0x35, 0x32, 0x32, // ) + (select(_522
	0x2c, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, // , fast::normaliz
	0x65, 0x28, 0x28, 0x28, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, // e(((s_NormalsGre
	0x65, 0x6e, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, // en.sample(s_Norm
	0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // alsGreenSampler,
	0x20, 0x5f, 0x34, 0x38, 0x39, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, //  _489).xyz * 2.0
	0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x29, // ) - float3(1.0))
	0x20, 0x2a, 0x20, 0x5f, 0x37, 0x30, 0x38, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x28, //  * _708), bool3(
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, // _mtl_u.u_blendma
	0x70, 0x5b, 0x31, 0x5d, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, // p[1].z != 0.0)) 
	0x2a, 0x20, 0x5f, 0x36, 0x35, 0x33, 0x2e, 0x79, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x73, 0x65, // * _653.y)) + (se
	0x6c, 0x65, 0x63, 0x74, 0x28, 0x5f, 0x35, 0x32, 0x32, 0x2c, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, // lect(_522, fast:
	0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x28, 0x28, 0x73, 0x5f, 0x4e, // :normalize(((s_N
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ormalsBlue.sampl
	0x65, 0x28, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x53, // e(s_NormalsBlueS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, 0x38, 0x39, 0x29, 0x2e, 0x78, 0x79, // ampler, _489).xy
	0x7a, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // z * 2.0) - float
	0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x30, 0x38, 0x29, 0x2c, // 3(1.0)) * _708),
	0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, //  bool3(_mtl_u.u_
	0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x31, 0x5d, 0x2e, 0x77, 0x20, 0x21, 0x3d, // blendmap[1].w !=
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x36, 0x35, 0x33, 0x2e, 0x7a, 0x29, //  0.0)) * _653.z)
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, // );.    }.    els
	0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // e.    {.        
	0x5f, 0x37, 0x39, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x32, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, // _799 = _522;.   
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, //  }.    out.bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, // FragData0 = floa
	0x74, 0x34, 0x28, 0x28, 0x28, 0x28, 0x28, 0x5f, 0x36, 0x36, 0x32, 0x20, 0x2a, 0x20, 0x5f, 0x34, // t4(((((_662 * _4
	0x38, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x36, 0x37, 0x31, 0x20, 0x2a, 0x20, 0x5f, 0x36, // 85) + (_671 * _6
	0x35, 0x33, 0x2e, 0x78, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x36, 0x38, 0x30, 0x20, 0x2a, // 53.x)) + (_680 *
	0x20, 0x5f, 0x36, 0x35, 0x33, 0x2e, 0x79, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x36, 0x38, //  _653.y)) + (_68
	0x39, 0x20, 0x2a, 0x20, 0x5f, 0x36, 0x35, 0x33, 0x2e, 0x7a, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, // 9 * _653.z)).xyz
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, // , 1.0);.    out.
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x31, 0x20, 0x3d, // bgfx_FragData1 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x37, 0x39, 0x39, 0x2c, 0x20, 0x30, 0x2e, //  float4(_799, 0.
	0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, // 0);.    out.bgfx
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, // _FragData2 = flo
	0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, // at4(0.0, 1.0, 1.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, // 0, 0.0);.    out
	0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x33, 0x20, // .bgfx_FragData3 
	0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, // = float4(0.0);. 
	0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, //    return out;.}
	0x0a, 0x0a, 0x00, 0x00, 0x40, 0x01,                                                             // ....@.
};
