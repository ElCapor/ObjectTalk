static const uint8_t OtBlendMapFS_mtl[4017] =
{
	0x46, 0x53, 0x48, 0x0b, 0x19, 0x67, 0x93, 0x59, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x11, 0x73, // FSH..g.Y.......s
	0x5f, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // _BlendMapSampler
	0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x73, 0x5f, 0x42, 0x6c, 0x65, // ...........s_Ble
	0x6e, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, // ndMapTexture....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x4e, // .......a_AlbedoN
	0x6f, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, // oneSampler......
	0x00, 0x00, 0x00, 0x00, 0x13, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x4e, 0x6f, 0x6e, // .....a_AlbedoNon
	0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, // eTexture........
	0x00, 0x00, 0x12, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x53, 0x61, // ...a_AlbedoRedSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, // mpler...........
	0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x75, // a_AlbedoRedTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x61, 0x5f, 0x41, // re...........a_A
	0x6c, 0x62, 0x65, 0x64, 0x6f, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // lbedoGreenSample
	0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x61, 0x5f, 0x41, 0x6c, // r...........a_Al
	0x62, 0x65, 0x64, 0x6f, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // bedoGreenTexture
	0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x61, 0x5f, 0x41, 0x6c, 0x62, // ...........a_Alb
	0x65, 0x64, 0x6f, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, // edoBlueSampler..
	0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, // .........a_Albed
	0x6f, 0x42, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, // oBlueTexture....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, // .......s_Normals
	0x4e, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, // NoneSampler.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x4e, // ......s_NormalsN
	0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, // oneTexture......
	0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x52, 0x65, // .....s_NormalsRe
	0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, // dSampler........
	0x00, 0x00, 0x13, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x64, 0x54, // ...s_NormalsRedT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x15, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, // .s_NormalsGreenS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ampler..........
	0x15, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x54, // .s_NormalsGreenT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x14, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x61, // .s_NormalsBlueSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, // mpler...........
	0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x78, // s_NormalsBlueTex
	0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x75, // ture...........u
	0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x12, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, // _blendmap.......
	0x00, 0x00, 0x00, 0x0a, 0x73, 0x5f, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x10, 0x00, // ....s_BlendMap..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, // .........a_Albed
	0x6f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, // oNone...........
	0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x10, 0x00, 0x00, 0x00, 0x00, // a_AlbedoRed.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x47, 0x72, // ......a_AlbedoGr
	0x65, 0x65, 0x6e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x61, 0x5f, // een...........a_
	0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x42, 0x6c, 0x75, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // AlbedoBlue......
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x4e, 0x6f, // .....s_NormalsNo
	0x6e, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x73, 0x5f, 0x4e, // ne...........s_N
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x64, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ormalsRed.......
	0x00, 0x00, 0x00, 0x0e, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, // ....s_NormalsGre
	0x65, 0x6e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x73, 0x5f, 0x4e, // en...........s_N
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ormalsBlue......
	0x00, 0x00, 0x00, 0x00, 0x95, 0x0c, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, // ........#include
	0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, //  <metal_stdlib>.
	0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, // #include <simd/s
	0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, // imd.h>..using na
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, // mespace metal;..
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, // struct _Global.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x62, 0x6c, // .    float4 u_bl
	0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x32, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, // endmap[2];.};..s
	0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // truct xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // n_out.{.    floa
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, // t4 bgfx_FragData
	0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, // 0 [[color(0)]];.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, //     float4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x31, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, // FragData1 [[colo
	0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // r(1)]];.    floa
	0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, // t4 bgfx_FragData
	0x32, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x32, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, // 2 [[color(2)]];.
	0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, // };..struct xlatM
	0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // tlMain_in.{.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, 0x5f, 0x62, 0x69, 0x74, 0x61, 0x6e, 0x67, 0x65, // float3 v_bitange
	0x6e, 0x74, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, // nt [[user(locn0)
	0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, // ]];.    float3 v
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, // _normal [[user(l
	0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ocn1)]];.    flo
	0x61, 0x74, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x5b, 0x5b, // at3 v_tangent [[
	0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x33, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, // user(locn3)]];. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, //    float2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, // oord0 [[user(loc
	0x6e, 0x34, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, // n4)]];.};..fragm
	0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, // ent xlatMtlMain_
	0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, // out xlatMtlMain(
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, // xlatMtlMain_in i
	0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, // n [[stage_in]], 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // constant _Global
	0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, // & _mtl_u [[buffe
	0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // r(0)]], texture2
	0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x42, 0x6c, 0x65, 0x6e, 0x64, // d<float> s_Blend
	0x4d, 0x61, 0x70, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, // Map [[texture(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, // ]], texture2d<fl
	0x6f, 0x61, 0x74, 0x3e, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x4e, 0x6f, 0x6e, // oat> a_AlbedoNon
	0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, // e [[texture(1)]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // , texture2d<floa
	0x74, 0x3e, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x20, 0x5b, // t> a_AlbedoRed [
	0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x32, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, // [texture(2)]], t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, // exture2d<float> 
	0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x5b, 0x5b, // a_AlbedoGreen [[
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x33, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, // texture(3)]], te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x61, // xture2d<float> a
	0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x42, 0x6c, 0x75, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, // _AlbedoBlue [[te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x34, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, // xture(4)]], text
	0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x4e, // ure2d<float> s_N
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, // ormalsNone [[tex
	0x74, 0x75, 0x72, 0x65, 0x28, 0x35, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ture(5)]], textu
	0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x4e, 0x6f, // re2d<float> s_No
	0x72, 0x6d, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x64, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, // rmalsRed [[textu
	0x72, 0x65, 0x28, 0x36, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // re(6)]], texture
	0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, // 2d<float> s_Norm
	0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, // alsGreen [[textu
	0x72, 0x65, 0x28, 0x37, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // re(7)]], texture
	0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, // 2d<float> s_Norm
	0x61, 0x6c, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // alsBlue [[textur
	0x65, 0x28, 0x38, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // e(8)]], sampler 
	0x73, 0x5f, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // s_BlendMapSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // r [[sampler(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, // , sampler a_Albe
	0x64, 0x6f, 0x4e, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, // doNoneSampler [[
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, // sampler(1)]], sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x52, 0x65, // mpler a_AlbedoRe
	0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, // dSampler [[sampl
	0x65, 0x72, 0x28, 0x32, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // er(2)]], sampler
	0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x61, //  a_AlbedoGreenSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, // mpler [[sampler(
	0x33, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x61, 0x5f, // 3)]], sampler a_
	0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // AlbedoBlueSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x34, 0x29, 0x5d, 0x5d, // r [[sampler(4)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, // , sampler s_Norm
	0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, // alsNoneSampler [
	0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x35, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, // [sampler(5)]], s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, // ampler s_Normals
	0x52, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, // RedSampler [[sam
	0x70, 0x6c, 0x65, 0x72, 0x28, 0x36, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // pler(6)]], sampl
	0x65, 0x72, 0x20, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, 0x65, // er s_NormalsGree
	0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, // nSampler [[sampl
	0x65, 0x72, 0x28, 0x37, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // er(7)]], sampler
	0x20, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x61, //  s_NormalsBlueSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, // mpler [[sampler(
	0x38, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, // 8)]]).{.    xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, // MtlMain_out out 
	0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // = {};.    float4
	0x20, 0x5f, 0x36, 0x35, 0x36, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x4d, //  _656 = s_BlendM
	0x61, 0x70, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x42, 0x6c, 0x65, 0x6e, // ap.sample(s_Blen
	0x64, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x2e, // dMapSampler, in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // v_texcoord0);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x38, 0x32, 0x20, 0x3d, 0x20, 0x28, //   float _482 = (
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, 0x36, 0x35, 0x36, 0x2e, 0x78, 0x29, 0x20, 0x2d, // (1.0 - _656.x) -
	0x20, 0x5f, 0x36, 0x35, 0x36, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x36, 0x35, 0x36, 0x2e, //  _656.y) - _656.
	0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x34, // z;.    float2 _4
	0x38, 0x36, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // 86 = in.v_texcoo
	0x72, 0x64, 0x30, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, // rd0 * _mtl_u.u_b
	0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x30, 0x5d, 0x2e, 0x77, 0x3b, 0x0a, 0x20, 0x20, // lendmap[0].w;.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x36, 0x36, 0x35, 0x20, 0x3d, 0x20, //   float4 _665 = 
	0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x4e, 0x6f, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x6d, // a_AlbedoNone.sam
	0x70, 0x6c, 0x65, 0x28, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x4e, 0x6f, 0x6e, 0x65, // ple(a_AlbedoNone
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, 0x38, 0x36, 0x29, 0x3b, 0x0a, // Sampler, _486);.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x36, 0x37, 0x34, 0x20, //     float4 _674 
	0x3d, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x2e, 0x73, 0x61, // = a_AlbedoRed.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x52, 0x65, 0x64, // mple(a_AlbedoRed
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, 0x38, 0x36, 0x29, 0x3b, 0x0a, // Sampler, _486);.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x36, 0x38, 0x33, 0x20, //     float4 _683 
	0x3d, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x2e, // = a_AlbedoGreen.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x47, // sample(a_AlbedoG
	0x72, 0x65, 0x65, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, 0x38, // reenSampler, _48
	0x36, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, // 6);.    float4 _
	0x36, 0x39, 0x32, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x42, 0x6c, // 692 = a_AlbedoBl
	0x75, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x61, 0x5f, 0x41, 0x6c, 0x62, 0x65, // ue.sample(a_Albe
	0x64, 0x6f, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, // doBlueSampler, _
	0x34, 0x38, 0x36, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // 486);.    float3
	0x20, 0x5f, 0x35, 0x31, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, //  _519 = fast::no
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x6e, 0x6f, 0x72, // rmalize(in.v_nor
	0x6d, 0x61, 0x6c, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // mal);.    float3
	0x78, 0x33, 0x20, 0x5f, 0x37, 0x31, 0x31, 0x20, 0x3d, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, // x3 _711 = transp
	0x6f, 0x73, 0x65, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x28, 0x66, 0x61, 0x73, // ose(float3x3(fas
	0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x69, 0x6e, 0x2e, // t::normalize(in.
	0x76, 0x5f, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x29, 0x2c, 0x20, 0x66, 0x61, 0x73, 0x74, // v_tangent), fast
	0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x69, 0x6e, 0x2e, 0x76, // ::normalize(in.v
	0x5f, 0x62, 0x69, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x29, 0x2c, 0x20, 0x5f, 0x35, 0x31, // _bitangent), _51
	0x39, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // 9));.    float3 
	0x5f, 0x37, 0x39, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x28, 0x28, // _795;.    if (((
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, // (_mtl_u.u_blendm
	0x61, 0x70, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, // ap[1].x != 0.0) 
	0x7c, 0x7c, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, // || (_mtl_u.u_ble
	0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x31, 0x5d, 0x2e, 0x79, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, // ndmap[1].y != 0.
	0x30, 0x29, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, // 0)) || (_mtl_u.u
	0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x31, 0x5d, 0x2e, 0x7a, 0x20, 0x21, // _blendmap[1].z !
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // = 0.0)) || (_mtl
	0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x31, 0x5d, // _u.u_blendmap[1]
	0x2e, 0x77, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, // .w != 0.0)).    
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x35, 0x20, 0x3d, // {.        _795 =
	0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, //  fast::normalize
	0x28, 0x28, 0x28, 0x28, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x5f, 0x35, 0x31, 0x39, 0x2c, // ((((select(_519,
	0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, //  fast::normalize
	0x28, 0x28, 0x28, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x6e, 0x65, // (((s_NormalsNone
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // .sample(s_Normal
	0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, // sNoneSampler, _4
	0x38, 0x36, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, // 86).xyz * 2.0) -
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, //  float3(1.0)) * 
	0x5f, 0x37, 0x31, 0x31, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x28, 0x5f, 0x6d, 0x74, // _711), bool3(_mt
	0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x31, // l_u.u_blendmap[1
	0x5d, 0x2e, 0x78, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x5f, // ].x != 0.0)) * _
	0x34, 0x38, 0x32, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x5f, // 482) + (select(_
	0x35, 0x31, 0x39, 0x2c, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // 519, fast::norma
	0x6c, 0x69, 0x7a, 0x65, 0x28, 0x28, 0x28, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, // lize(((s_Normals
	0x52, 0x65, 0x64, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x4e, 0x6f, 0x72, // Red.sample(s_Nor
	0x6d, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // malsRedSampler, 
	0x5f, 0x34, 0x38, 0x36, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, // _486).xyz * 2.0)
	0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, //  - float3(1.0)) 
	0x2a, 0x20, 0x5f, 0x37, 0x31, 0x31, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x28, 0x5f, // * _711), bool3(_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, // mtl_u.u_blendmap
	0x5b, 0x31, 0x5d, 0x2e, 0x79, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, // [1].y != 0.0)) *
	0x20, 0x5f, 0x36, 0x35, 0x36, 0x2e, 0x78, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x73, 0x65, 0x6c, //  _656.x)) + (sel
	0x65, 0x63, 0x74, 0x28, 0x5f, 0x35, 0x31, 0x39, 0x2c, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, // ect(_519, fast::
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x28, 0x28, 0x73, 0x5f, 0x4e, 0x6f, // normalize(((s_No
	0x72, 0x6d, 0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // rmalsGreen.sampl
	0x65, 0x28, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x47, 0x72, 0x65, 0x65, 0x6e, // e(s_NormalsGreen
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, 0x38, 0x36, 0x29, 0x2e, 0x78, // Sampler, _486).x
	0x79, 0x7a, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, // yz * 2.0) - floa
	0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x31, 0x31, 0x29, // t3(1.0)) * _711)
	0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, // , bool3(_mtl_u.u
	0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x31, 0x5d, 0x2e, 0x7a, 0x20, 0x21, // _blendmap[1].z !
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x36, 0x35, 0x36, 0x2e, 0x79, // = 0.0)) * _656.y
	0x29, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x5f, 0x35, 0x31, // )) + (select(_51
	0x39, 0x2c, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, // 9, fast::normali
	0x7a, 0x65, 0x28, 0x28, 0x28, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x42, 0x6c, // ze(((s_NormalsBl
	0x75, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, // ue.sample(s_Norm
	0x61, 0x6c, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // alsBlueSampler, 
	0x5f, 0x34, 0x38, 0x36, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, // _486).xyz * 2.0)
	0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, //  - float3(1.0)) 
	0x2a, 0x20, 0x5f, 0x37, 0x31, 0x31, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x33, 0x28, 0x5f, // * _711), bool3(_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, // mtl_u.u_blendmap
	0x5b, 0x31, 0x5d, 0x2e, 0x77, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, // [1].w != 0.0)) *
	0x20, 0x5f, 0x36, 0x35, 0x36, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, //  _656.z));.    }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // .    else.    {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x35, 0x20, 0x3d, 0x20, 0x5f, //         _795 = _
	0x35, 0x31, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, // 519;.    }.    o
	0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, // ut.bgfx_FragData
	0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x28, 0x28, 0x28, 0x28, 0x5f, // 0 = float4(((((_
	0x36, 0x36, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x34, 0x38, 0x32, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x5f, // 665 * _482) + (_
	0x36, 0x37, 0x34, 0x20, 0x2a, 0x20, 0x5f, 0x36, 0x35, 0x36, 0x2e, 0x78, 0x29, 0x29, 0x20, 0x2b, // 674 * _656.x)) +
	0x20, 0x28, 0x5f, 0x36, 0x38, 0x33, 0x20, 0x2a, 0x20, 0x5f, 0x36, 0x35, 0x36, 0x2e, 0x79, 0x29, //  (_683 * _656.y)
	0x29, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x36, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x5f, 0x36, 0x35, 0x36, // ) + (_692 * _656
	0x2e, 0x7a, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // .z)).xyz, 1.0);.
	0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, //     out.bgfx_Fra
	0x67, 0x44, 0x61, 0x74, 0x61, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, // gData1 = float4(
	0x5f, 0x37, 0x39, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // _795, 0.0);.    
	0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, // out.bgfx_FragDat
	0x61, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // a2 = float4(_mtl
	0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x30, 0x5d, // _u.u_blendmap[0]
	0x2e, 0x78, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, // .x, _mtl_u.u_ble
	0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // ndmap[0].y, _mtl
	0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x5b, 0x30, 0x5d, // _u.u_blendmap[0]
	0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, // .z, 1.0);.    re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x40, // turn out;.}....@
	0x01,                                                                                           // .
};
